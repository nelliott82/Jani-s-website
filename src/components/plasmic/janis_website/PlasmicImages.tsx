// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5gGUsmDkteQcDm1s3dbX1r
// Component: OXf6eLeE3PJ1

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_janis_website.module.css"; // plasmic-import: 5gGUsmDkteQcDm1s3dbX1r/projectcss
import sty from "./PlasmicImages.module.css"; // plasmic-import: OXf6eLeE3PJ1/css

createPlasmicElementProxy;

export type PlasmicImages__VariantMembers = {
  makeupType: "express" | "social" | "wedding";
};
export type PlasmicImages__VariantsArgs = {
  makeupType?: SingleChoiceArg<"express" | "social" | "wedding">;
};
type VariantPropType = keyof PlasmicImages__VariantsArgs;
export const PlasmicImages__VariantProps = new Array<VariantPropType>(
  "makeupType"
);

export type PlasmicImages__ArgsType = {};
type ArgPropType = keyof PlasmicImages__ArgsType;
export const PlasmicImages__ArgProps = new Array<ArgPropType>();

export type PlasmicImages__OverridesType = {
  images?: p.Flex<"div">;
  expressMakeup?: p.Flex<"div">;
  socialMakeup?: p.Flex<"div">;
  weddingMakeup?: p.Flex<"div">;
};

export interface DefaultImagesProps {
  makeupType?: SingleChoiceArg<"express" | "social" | "wedding">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicImages__RenderFunc(props: {
  variants: PlasmicImages__VariantsArgs;
  args: PlasmicImages__ArgsType;
  overrides: PlasmicImages__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "makeupType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.makeupType
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"images"}
      data-plasmic-override={overrides.images}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.images,
        {
          [sty.imagesmakeupType_social]: hasVariant(
            $state,
            "makeupType",
            "social"
          ),
          [sty.imagesmakeupType_wedding]: hasVariant(
            $state,
            "makeupType",
            "wedding"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"expressMakeup"}
        data-plasmic-override={overrides.expressMakeup}
        className={classNames(projectcss.all, sty.expressMakeup, {
          [sty.expressMakeupmakeupType_express]: hasVariant(
            $state,
            "makeupType",
            "express"
          ),
          [sty.expressMakeupmakeupType_social]: hasVariant(
            $state,
            "makeupType",
            "social"
          ),
          [sty.expressMakeupmakeupType_wedding]: hasVariant(
            $state,
            "makeupType",
            "wedding"
          )
        })}
      />

      <div
        data-plasmic-name={"socialMakeup"}
        data-plasmic-override={overrides.socialMakeup}
        className={classNames(projectcss.all, sty.socialMakeup, {
          [sty.socialMakeupmakeupType_express]: hasVariant(
            $state,
            "makeupType",
            "express"
          ),
          [sty.socialMakeupmakeupType_social]: hasVariant(
            $state,
            "makeupType",
            "social"
          ),
          [sty.socialMakeupmakeupType_wedding]: hasVariant(
            $state,
            "makeupType",
            "wedding"
          )
        })}
      />

      <div
        data-plasmic-name={"weddingMakeup"}
        data-plasmic-override={overrides.weddingMakeup}
        className={classNames(projectcss.all, sty.weddingMakeup, {
          [sty.weddingMakeupmakeupType_express]: hasVariant(
            $state,
            "makeupType",
            "express"
          ),
          [sty.weddingMakeupmakeupType_wedding]: hasVariant(
            $state,
            "makeupType",
            "wedding"
          )
        })}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  images: ["images", "expressMakeup", "socialMakeup", "weddingMakeup"],
  expressMakeup: ["expressMakeup"],
  socialMakeup: ["socialMakeup"],
  weddingMakeup: ["weddingMakeup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  images: "div";
  expressMakeup: "div";
  socialMakeup: "div";
  weddingMakeup: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImages__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImages__VariantsArgs;
    args?: PlasmicImages__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImages__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImages__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicImages__ArgProps,
          internalVariantPropNames: PlasmicImages__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImages__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "images") {
    func.displayName = "PlasmicImages";
  } else {
    func.displayName = `PlasmicImages.${nodeName}`;
  }
  return func;
}

export const PlasmicImages = Object.assign(
  // Top-level PlasmicImages renders the root element
  makeNodeComponent("images"),
  {
    // Helper components rendering sub-elements
    expressMakeup: makeNodeComponent("expressMakeup"),
    socialMakeup: makeNodeComponent("socialMakeup"),
    weddingMakeup: makeNodeComponent("weddingMakeup"),

    // Metadata about props expected for PlasmicImages
    internalVariantProps: PlasmicImages__VariantProps,
    internalArgProps: PlasmicImages__ArgProps
  }
);

export default PlasmicImages;
/* prettier-ignore-end */
